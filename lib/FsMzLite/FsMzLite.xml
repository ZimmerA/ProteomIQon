<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FsMzLite</name></assembly>
<members>
<member name="M:FsMzLite.Indexer.splitAdjacentByUpperBorder``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Core.FSharpFunc{FsMzLite.Indexer.IndexedItem{``0,``2}[],Microsoft.FSharp.Collections.FSharpList{``2}}}}},FsMzLite.Indexer.IndexedItem{``0,``2}[],``0[])">

</member>
<member name="M:FsMzLite.Indexer.splitByAdjacentRanges``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Core.FSharpFunc{FsMzLite.Indexer.IndexedItem{``0,``2}[],Microsoft.FSharp.Collections.FSharpList{``2}}}}},FsMzLite.Indexer.IndexedItem{``0,``2}[],System.Tuple{``0,``0}[])">

</member>
<member name="M:FsMzLite.Indexer.getDataByRange``1(System.Double,System.Double,FsMzLite.Indexer.IndexedItem{System.Double,``0}[])">
<summary>
 Returns Lists of IndexedItems.Items which are greater than the first value and smaller than the second value of the range parameter
</summary>
</member>
<member name="M:FsMzLite.Indexer.walkTill``1(System.Double,System.Int32,Microsoft.FSharp.Collections.FSharpList{``0},FsMzLite.Indexer.IndexedItem{System.Double,``0}[])">
<summary>
 Walks a Array till the value of the Array element is greater or equal to the parameter &apos;upperborder&apos;
</summary>
</member>
<member name="M:FsMzLite.Indexer.mapConsBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Applies the f1 to every element in the list but the last element. The last element is used as a input parameter for f2.
 Returns a new Collection  
</summary>
</member>
<member name="M:FsMzLite.Indexer.sortedIdxItemCollection``2(Microsoft.FSharp.Core.FSharpFunc{``1,FsMzLite.Indexer.IndexedItem{``0,``1}},System.Collections.Generic.IEnumerable{``1})">
<summary>
 Returns a IndexedItemCollection sorted by the Index. The Index is generated by a function of type IndexedItemGenerator
</summary>
</member>
<member name="P:FsMzLite.AccessMassSpectrum.createScanTimeRange">
<summary>
 Returns function which can be used to determine the range between the scanTime of two MassSpectra. 
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.initCreateLastRange``1(Microsoft.FSharp.Core.FSharpFunc{MzLite.Model.MassSpectrum,``0},``0,MzLite.Model.MassSpectrum)">
<summary>
 Returns Range theoretical Range between a real feature of the last MassSpectra and a type dependend infinityValue
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.initCreateRange``1(Microsoft.FSharp.Core.FSharpFunc{MzLite.Model.MassSpectrum,``0},MzLite.Model.MassSpectrum,MzLite.Model.MassSpectrum)">
<summary>
 Returns Range between two Features of two MassSpectra.  
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.createPrecursorMZIdxedMS(MzLite.Model.MassSpectrum)">
<summary>
 Returns a precursorMZ-indexed massSpectrum
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.getPrecursorMZ(MzLite.Model.MassSpectrum)">
<summary>
 Returns PrecursorMZ of MS2 spectrum
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.createScanTimeIdxedMS(MzLite.Model.MassSpectrum)">
<summary>
 Returns a msLevel-indexed massSpectrum
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.getScanTime(MzLite.Model.MassSpectrum)">
<summary>
 Returns the ScanTime (formerly: RetentionTime) of the MassSpectrum
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.createMsLevelIdxedMS(MzLite.Model.MassSpectrum)">
<summary>
 Returns a msLevel-indexed massSpectrum
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.getMsLevel(MzLite.Model.MassSpectrum)">
<summary>
 Returns the MsLevel of the MassSpectrum 
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.createIDIdxedMS(MzLite.Model.MassSpectrum)">
<summary>
 Returns a id-indexed massSpectrum
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.getID(MzLite.Model.MassSpectrum)">
<summary>
 Returns the ID of the MassSpectrum
</summary>
</member>
<member name="M:FsMzLite.AccessMassSpectrum.getMassSpectraBy(MzLite.IO.IMzLiteDataReader,System.String)">
<summary>
 accesses the Header of the WiffFile referenced by the path
</summary>
</member>
<member name="M:FsMzLite.AccessPeakArray.createPeak1DArray(System.Boolean,MzLite.Binary.BinaryDataType,MzLite.Binary.BinaryDataType,System.Double[],System.Double[])">
<summary>
 Creates Peak1DArray of mzData array and intensityData Array
</summary>
</member>
<member name="M:FsMzLite.AccessPeakArray.mzIntensityArrayOf(MzLite.Binary.Peak1DArray)">
<summary>
 Returns tuple of a mzData Array and intensityData Array of a peak1DArray
</summary>
</member>
<member name="M:FsMzLite.AccessPeakArray.intensityDataOf(MzLite.Binary.Peak1DArray)">
<summary>
 Returns a intensityData Array of a peak1DArray
</summary>
</member>
<member name="M:FsMzLite.AccessPeakArray.mzDataOf(MzLite.Binary.Peak1DArray)">
<summary>
 Returns a mzData Array of a peak1DArray
</summary>
</member>
<member name="M:FsMzLite.AccessPeakArray.getPeak1DArray(MzLite.IO.IMzLiteDataReader,System.String)">
<summary>
 Returns a MzLite.Binary.Peak1DArray
</summary>
</member>
<member name="M:FsMzLite.AccessDB.insertMSSpectraBy``1(Microsoft.FSharp.Core.FSharpFunc{MzLite.SQL.MzLiteSQL,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{MzLite.IO.IMzLiteDataReader,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{MzLite.Model.MassSpectrum,Microsoft.FSharp.Core.Unit}}}}},System.String,``0,MzLite.IO.IMzLiteDataReader,System.Boolean,System.Collections.Generic.IEnumerable{MzLite.Model.MassSpectrum})">
<summary>
 Starts bulkinsert of mass spectra into a MzLiteSQL database
</summary>
</member>
<member name="M:FsMzLite.AccessDB.insertModifiedSpectrumBy(Microsoft.FSharp.Core.FSharpFunc{MzLite.IO.IMzLiteDataReader,Microsoft.FSharp.Core.FSharpFunc{MzLite.Model.MassSpectrum,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,MzLite.Binary.Peak1DArray}}},MzLite.SQL.MzLiteSQL,System.String,MzLite.IO.IMzLiteDataReader,System.Boolean,MzLite.Model.MassSpectrum)">
<summary>
 modifies spectrum according to the used spectrumPeaksModifierF and inserts the result into the DB schema 
</summary>
</member>
<member name="M:FsMzLite.AccessDB.insertMSSpectrum(MzLite.SQL.MzLiteSQL,System.String,MzLite.IO.IMzLiteDataReader,System.Boolean,MzLite.Model.MassSpectrum)">
<summary>
 copies MassSpectrum into DB schema
</summary>
</member>
<member name="M:FsMzLite.AccessDB.getConnection(System.String)">
<summary>
 Returns the conncetion string to a existing MzLiteSQL DB
</summary>
</member>
<member name="M:FsMzLite.AccessDB.initDB(System.String)">
<summary>
 Create a new file instance of the DB schema. DELETES already existing instance
</summary>
</member>
<member name="M:FsMzLite.Query.getSwathXICsBy(MzLite.IO.IMzLiteDataReader,MzLite.Processing.SwathIndexer,MzLite.Processing.RangeQuery,MzLite.Processing.RangeQuery[],System.Double)">

</member>
<member name="M:FsMzLite.Query.getSwathXics(MzLite.IO.IMzLiteDataReader,MzLite.Processing.SwathIndexer,MzLite.Processing.SwathQuery)">

</member>
<member name="M:FsMzLite.Query.getSwathIdx(MzLite.IO.IMzLiteDataReader,System.String)">

</member>
<member name="M:FsMzLite.Query.createSwathQuery(System.Double,MzLite.Processing.RangeQuery,MzLite.Processing.RangeQuery[])">

</member>
<member name="M:FsMzLite.Query.getXICs(MzLite.IO.IMzLiteDataReader,MzLite.Commons.Arrays.IMzLiteArray{MzLite.Processing.MzLiteLinq.RtIndexEntry},MzLite.Processing.RangeQuery,MzLite.Processing.RangeQuery[])">

</member>
<member name="M:FsMzLite.Query.getXIC(MzLite.IO.IMzLiteDataReader,MzLite.Commons.Arrays.IMzLiteArray{MzLite.Processing.MzLiteLinq.RtIndexEntry},MzLite.Processing.RangeQuery,MzLite.Processing.RangeQuery)">

</member>
<member name="M:FsMzLite.Query.getMS1RTIdx(MzLite.IO.IMzLiteDataReader,System.String)">

</member>
<member name="M:FsMzLite.Query.createRangeQuery(System.Double,System.Double)">

</member>
</members>
</doc>
